name: EC2 Instance Deploy and Model Execution

on:
  push:
    branches:
      - ingeneurie

jobs:
  terraform:
    name: Deploy EC2 instance using Terraform
    runs-on: ubuntu-latest

    steps:
    - name: Checkout the code
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      run: terraform init -input=false
      working-directory: terraform/
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: ${{ secrets.AWS_REGION }}

    - name: Terraform Plan
      run: terraform plan
      working-directory: terraform/
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}

    - name: Terraform Apply and Output EC2 IP
      id: apply
      run: |
        terraform apply -auto-approve
        # Capture de l'IP publique de l'EC2
        IP=$(terraform output -raw ec2_public_ip)
        echo "EC2 Public IP is: $IP"
        # Écrire l'IP dans un fichier d'environnement GitHub
        echo "EC2_PUBLIC_IP=$IP" >> $GITHUB_ENV
      working-directory: terraform/
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}

  build_and_deploy:
    name: Build and Deploy Docker container
    needs: terraform
    runs-on: ubuntu-latest

    steps:
    - name: Checkout the code
      uses: actions/checkout@v2

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: ${{ secrets.AWS_REGION }}

    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names my-deep-learning-model || \
        aws ecr create-repository --repository-name my-deep-learning-model
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: ${{ secrets.AWS_REGION }}

    - name: Build Docker image
      run: |
        docker build -t my-deep-learning-model:latest -f docker/Dockerfile .

    - name: Tag Docker image
      run: |
        docker tag my-deep-learning-model:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-deep-learning-model:latest

    - name: Push Docker image to ECR
      run: |
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-deep-learning-model:latest
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: ${{ secrets.AWS_REGION }}

    - name: Debug information
      run: |
        echo "EC2 Public IP from environment: $EC2_PUBLIC_IP"
        echo "SSH Private Key (first 20 chars): ${SSH_PRIVATE_KEY:0:20}"
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: SSH into EC2 and pull Docker image
      run: |
        # Créer un fichier temporaire pour la clé privée
        echo "$SSH_PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        # Créer le répertoire .ssh s'il n'existe pas
        mkdir -p ~/.ssh
        # Ajouter l'hôte à known_hosts pour éviter le prompt SSH
        ssh-keyscan -H $EC2_PUBLIC_IP >> ~/.ssh/known_hosts
        # Exécuter la commande SSH en utilisant l'IP publique récupérée de Terraform
        ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@$EC2_PUBLIC_IP \
        "docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-deep-learning-model:latest && docker run -d -p 80:80 my-deep-learning-model"
        # Supprimer la clé privée après utilisation
        rm private_key.pem
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

  follow_logs:
    name: Follow Model Execution Logs
    needs: build_and_deploy
    runs-on: ubuntu-latest

    steps:
    - name: SSH into EC2 and follow logs
      run: |
        # Créer un fichier temporaire pour la clé privée
        echo "$SSH_PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        # Suivre les logs de Docker sur l'instance EC2
        ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@$EC2_PUBLIC_IP "docker logs -f $(docker ps -q --filter ancestor=my-deep-learning-model:latest)"
        # Supprimer la clé privée après utilisation
        rm private_key.pem
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
