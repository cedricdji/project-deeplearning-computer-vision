name: EC2 Instance Deploy and Model Execution

on:
  push:
    branches:
      - ingeneurie  # Change cette branche selon ta configuration

jobs:
  terraform:
    name: Deploy EC2 instance using Terraform
    runs-on: ubuntu-latest

    steps:
    - name: Checkout the code
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      run: terraform init -input=false
      working-directory: terraform/
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: ${{ secrets.AWS_REGION }}

    - name: Terraform Plan
      run: terraform plan
      working-directory: terraform/
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}

    - name: Terraform Apply and Capture EC2 IP
      id: apply
      run: |
        terraform apply -auto-approve
        # Capture l'IP publique de l'instance EC2
        IP=$(terraform output -raw ec2_public_ip)
        echo "EC2_PUBLIC_IP=$IP" >> "$GITHUB_ENV"
      working-directory: terraform/
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}

  build_and_deploy:
    name: Build and Deploy Docker container
    needs: terraform
    runs-on: ubuntu-latest

    steps:
    - name: Checkout the code
      uses: actions/checkout@v2

    # Vérifie si le modèle a été modifié avant de procéder à la construction du conteneur
    - name: Check if model has changed
      id: check_model
      run: |
        if git diff --quiet HEAD~1 HEAD docker/model/; then
          echo "Model unchanged" > model_status.txt
          echo "model_changed=false" >> "$GITHUB_ENV"
        else
          echo "Model has changed" > model_status.txt
          echo "model_changed=true" >> "$GITHUB_ENV"
        fi

    # Conditionnel pour ne pas reconstruire si le modèle n'a pas changé
    - name: Build Docker image
      if: env.model_changed == 'true'
      run: |
        docker build -t my-deep-learning-model:latest -f docker/Dockerfile .

    - name: Tag Docker image
      if: env.model_changed == 'true'
      run: |
        docker tag my-deep-learning-model:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-deep-learning-model:latest

    - name: Push Docker image to ECR
      if: env.model_changed == 'true'
      run: |
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-deep-learning-model:latest
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: ${{ secrets.AWS_REGION }}

    - name: SSH into EC2 and pull Docker image
      run: |
        echo "$SSH_PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        IP=${{ env.EC2_PUBLIC_IP }}
        ssh-keyscan -H $IP >> ~/.ssh/known_hosts
        ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@$IP \
        "docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-deep-learning-model:latest && docker run -d -p 80:80 my-deep-learning-model"
        rm private_key.pem
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

  follow_logs:
    name: Follow Model Execution Logs
    needs: build_and_deploy
    runs-on: ubuntu-latest

    steps:
    - name: SSH into EC2 and follow logs
      run: |
        echo "$SSH_PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        IP=${{ env.EC2_PUBLIC_IP }}
        ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@$IP \
        "docker logs -f $(docker ps -q --filter ancestor=my-deep-learning-model:latest)"
        rm private_key.pem
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
